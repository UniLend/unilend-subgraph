// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewDonation extends ethereum.Event {
  get params(): NewDonation__Params {
    return new NewDonation__Params(this);
  }
}

export class NewDonation__Params {
  _event: NewDonation;

  constructor(event: NewDonation) {
    this._event = event;
  }

  get donator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReleaseRate extends ethereum.Event {
  get params(): ReleaseRate__Params {
    return new ReleaseRate__Params(this);
  }
}

export class ReleaseRate__Params {
  _event: ReleaseRate;

  constructor(event: ReleaseRate) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Released extends ethereum.Event {
  get params(): Released__Params {
    return new Released__Params(this);
  }
}

export class Released__Params {
  _event: Released;

  constructor(event: Released) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UnilendFDonation extends ethereum.SmartContract {
  static bind(address: Address): UnilendFDonation {
    return new UnilendFDonation("UnilendFDonation", address);
  }

  core(): Address {
    let result = super.call("core", "core():(address)", []);

    return result[0].toAddress();
  }

  try_core(): ethereum.CallResult<Address> {
    let result = super.tryCall("core", "core():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultReleaseRate(): BigInt {
    let result = super.call(
      "defaultReleaseRate",
      "defaultReleaseRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultReleaseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultReleaseRate",
      "defaultReleaseRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastReleased(param0: Address): BigInt {
    let result = super.call("lastReleased", "lastReleased(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastReleased(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastReleased",
      "lastReleased(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  releaseRate(param0: Address): BigInt {
    let result = super.call("releaseRate", "releaseRate(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_releaseRate(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "releaseRate",
      "releaseRate(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfToken(_token: Address): BigInt {
    let result = super.call(
      "balanceOfToken",
      "balanceOfToken(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfToken(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfToken",
      "balanceOfToken(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReleaseRate(_token: Address): BigInt {
    let result = super.call(
      "getReleaseRate",
      "getReleaseRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getReleaseRate(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReleaseRate",
      "getReleaseRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentRelease(_token: Address, timestamp: BigInt): BigInt {
    let result = super.call(
      "getCurrentRelease",
      "getCurrentRelease(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentRelease(
    _token: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentRelease",
      "getCurrentRelease(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donate(_token: Address, amount: BigInt): boolean {
    let result = super.call("donate", "donate(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_donate(_token: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("donate", "donate(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetReleaseRateCall extends ethereum.Call {
  get inputs(): SetReleaseRateCall__Inputs {
    return new SetReleaseRateCall__Inputs(this);
  }

  get outputs(): SetReleaseRateCall__Outputs {
    return new SetReleaseRateCall__Outputs(this);
  }
}

export class SetReleaseRateCall__Inputs {
  _call: SetReleaseRateCall;

  constructor(call: SetReleaseRateCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetReleaseRateCall__Outputs {
  _call: SetReleaseRateCall;

  constructor(call: SetReleaseRateCall) {
    this._call = call;
  }
}

export class ReleaseTokensCall extends ethereum.Call {
  get inputs(): ReleaseTokensCall__Inputs {
    return new ReleaseTokensCall__Inputs(this);
  }

  get outputs(): ReleaseTokensCall__Outputs {
    return new ReleaseTokensCall__Outputs(this);
  }
}

export class ReleaseTokensCall__Inputs {
  _call: ReleaseTokensCall;

  constructor(call: ReleaseTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleaseTokensCall__Outputs {
  _call: ReleaseTokensCall;

  constructor(call: ReleaseTokensCall) {
    this._call = call;
  }
}
